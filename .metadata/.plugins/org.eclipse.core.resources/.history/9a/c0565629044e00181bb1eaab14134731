package Boards;
import java.util.*;


public class ConnectFourBoard extends Board {
	private int WIDTH;
	private int HEIGHT;

	public ConnectFourBoard(String player1, String player2, String wq1, String wq2, String token1, String token2, int score1, int score2,int WIDTH, int HEIGHT) {
		super( player1, player2, wq1, wq2, token1, token2, score1, score2);
		this.setWIDTH(WIDTH);
		this.setHEIGHT(HEIGHT);
		board = new int[WIDTH][HEIGHT];
	}
	
	

    
    public int getWIDTH() {
		return WIDTH;
	}


	public void setWIDTH(int wIDTH) {
		WIDTH = wIDTH;
	}


	public int getHEIGHT() {
		return HEIGHT;
	}


	public void setHEIGHT(int hEIGHT) {
		HEIGHT = hEIGHT;
	}



	//creates scanner
    Scanner scanner = new Scanner(System.in);

    public void playC4(){
    	int maximumMoves = WIDTH-1; //takes away 1 because arrays start at 0
    	System.out.println("\n\n============================================================");
    	System.out.println("||                       Connect Four                     ||");
    	System.out.println("============================================================");
    	System.out.println("Please choose a column to place your token. (Between 0-"+maximumMoves+")"); //input cannot be more than displayed maximum moves
    	printBoard();
        outer:
        while(true){
            int column=0; // initializes variable
            
            //PLAYER 1.
            while(true){
            System.out.println("\n\n"+player1+"'s turn:");
            column=scanner.nextInt();
            while (column > maximumMoves) {  // if the input is greater than the maximum value , error is returned
            	System.out.println("Invalid input. Try a number between 0 and "+maximumMoves);
            	column = scanner.nextInt();
            }
                if(isPlayable(column)){ // checks if its playable first 
                    if(playMove(column, 1)){ // plays move 
                        printBoard();
                        System.out.println("\n\n"+player1+" wins!");
                        System.out.println(player1+ " says: " +wq1); // prints winner quote with username
                        
                        inGameWon1 +=1;
                        if (player1Winner()) {
                        	inGameLost2+=1;  // adds 1 loser score for player2
                        	score1 += inGameWon1; // adds 1 score to game score 1 
          
                        	
                        }
                        break outer;
                    }
                    break;
                }
                else
                    System.out.println("Column "+column+" is already full!!"); // if the column is not playable
            }
            printBoard();
            
            //PLAYER 2.    
            while(true){
            System.out.println("\n\n"+player2+"'s turn:");
            column=scanner.nextInt();
            while (column > maximumMoves) {
            	System.out.println("Invalid input. Try a number between 0 and "+maximumMoves);
            	column = scanner.nextInt();
            }
                if(isPlayable(column)){
                    if(playMove(column, 2)){
                        printBoard();
                        System.out.println("\n\n"+player2+" wins!");
                        System.out.println(player2 + " says " +wq2); 
                        
                        inGameWon2 += 1;
                        
                        if (player2Winner()) {
                        	inGameLost1+=1;
                        	score2 += inGameWon2;
                        }

                        break outer;
                    }
                    break;
                }
                else
                    System.out.println("Column "+column+" is already full!");
            }
            printBoard();
            
            if(isFull()){
                System.out.print("Draw.");
                break;
            }
            
        }
    }
    
                
    public void printBoard(){
    	System.out.println(player1 + " VS. "+ player2);  //displays two players names 
        for(int i=0;i<board.length;i++){                 //prints the board 
            for(int j=0;j<board[0].length;j++){
                if(board[i][j] == 0)
                    System.out.print("_  ");
                else
                    System.out.print(board[i][j]+"  ");
            }
            System.out.println();
        }
        
        for(int i=0;i<WIDTH;i++)
            System.out.print("*  ");
        System.out.println();
        
        for(int i=0;i<WIDTH;i++)
            System.out.print(i+"  ");
        System.out.println();
    }
    
    public boolean playMove(int column, int playerNum){
        int i=0;
        for(i=0;i<HEIGHT;i++){
            if(board[i][column] == 1 || board[i][column] == 2){  
                board[i-1][column]=playerNum;
                break;
            }
        }
        if(i == HEIGHT)
            board[i-1][column]=playerNum;
        
        totalMovesPlayed++;
        return isConnected(i-1,column);
    }
    
    public boolean isPlayable(int column){    //
        return board[0][column] == 0; // places token into the lowest possible position
    }
    
    public boolean isFull(){
        return totalMovesPlayed == HEIGHT*WIDTH;  
    }
    
    public boolean isConnected(int x, int y){
        int num=board[WIDTH][HEIGHT];             
        int count=0;
        int i=HEIGHT;

        
        //HORIZONTAL.
        while(i<WIDTH && board[WIDTH][i] == num){
            count++;
            i++;
        }
        i=HEIGHT-1;
        while(i>=0 && board[WIDTH][i] == num){
            count++;
            i--;
        }
        if(count == 4) 
            return true;
        
        //VERTICAL.
        count=0;
        int j=WIDTH;
        while(j<HEIGHT && board[j][HEIGHT] == num){
            count++;
            j++;
        }
        if(count == 4)
            return true;
        
        //SECONDARY DIAGONAL.
        count=0;
        i=WIDTH;
        j=HEIGHT;
        while(i<WIDTH && j<HEIGHT && board[i][j] == num){
            count++;
            i++;
            j++;
        }
        i=WIDTH-1;
        j=HEIGHT-1;
        while(i>=0 && j>=0 && board[i][j] == num){
            count++;
            i--;
            j--;
        }
        if(count == 4)
            return true;
        
        //LEADING DIAGONAL.
        count=0;
        i=WIDTH;
        j=HEIGHT;
        while(i<WIDTH && j>=0 && board[i][j] == num){
            count++;
            i++;
            j--;
        }
        i=x-1;
        j=y+1;
        while(i>=0 && j<HEIGHT && board[i][j] == num){
            count++;
            i--;
            j++;
        }
        if(count == 4)
            return true;
        
        return false;
    
    }
    
   
    
}